<UserControl x:Class="RoiManager.Views.RoiSelectionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:RoiManager.Views"
             xmlns:vm="clr-namespace:RoiManager.ViewModels" 
             xmlns:prism="http://prismlibrary.com/"
             xmlns:ac="clr-namespace:MvvmCommon.Actions;assembly=MvvmCommon"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="1200" d:DataContext="{d:DesignInstance vm:RoiSelectionViewModel}">
    <UserControl.Resources>
        <CollectionViewSource
            x:Key="RoiNameList"
            Source="{Binding RoiNameList}" />
        <Style TargetType="Button">
            <Setter Property="Margin" Value="3"/>
            <Setter Property="Width" Value="72"/>
        </Style>
    </UserControl.Resources>
    <Grid>
        <StackPanel>
            <StackPanel Orientation="Horizontal" >
                <Button Content="OK">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <prism:InvokeCommandAction Command="{Binding OkCommand}"/>
                            <ac:CloseWindowAction/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
                <Button Content="Cancel">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <prism:InvokeCommandAction Command="{Binding CancelCommand}"/>
                            <ac:CloseWindowAction/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
            </StackPanel>
            <DataGrid ItemsSource="{Binding RoiViewModels}" AutoGenerateColumns="False" CanUserAddRows="False" MaxHeight="800" MaxWidth="1450" >
                <DataGrid.Columns>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Underive">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding CanUnderive.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="{Binding CanDisableUnderive.Value}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Update">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding CanUpdate.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="{Binding CanDisableUpdate.Value}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Delete Geometry">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding CanDeleteGeometry.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="{Binding CanDisableDeleteGeometry.Value}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Delete ROI">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding CanDeleteRoi.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn
                    Header="Name"
                    Binding="{Binding Name.Value, Mode=OneTime}"
                    IsReadOnly="True"/>
                    <DataGridTextColumn
                    Header="Geometry"
                    Binding="{Binding HasGeometry.Value, Mode=OneTime}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn
                    Header="Derived"
                    Binding="{Binding IsDerived.Value, Mode=OneTime}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn
                    Header="ROIs"
                    Binding="{Binding DependentRoisDisplay, Mode=OneTime}"/>
                    <DataGridTextColumn
                    Header="Examination"
                    Binding="{Binding ExaminationName.Value, Mode=OneTime}"
                    IsReadOnly="True"/>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Rename">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding CanRename.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn CanUserReorder="False" CanUserResize="False" CanUserSort="False" Header="New Name">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding NewName.Value, Mode=TwoWay}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <ComboBox IsEditable="True" Text="{Binding NewName.Value, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Source={StaticResource RoiNameList}}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Change Type">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding CanChangeRoiType.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Type">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding DataContext.RoiTypeList, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                          SelectedValue="{Binding RoiType.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn IsReadOnly="True" Header="Change Color">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding CanChangeColor.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Color">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <xctk:ColorPicker SelectedColor="{Binding Color.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" DisplayColorAndName="True"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
    </Grid>
</UserControl>
